<?xml version="1.0"?>
<ruleset name="codestyle">
    <description>Stefna coding standard.</description>
    <arg name="tab-width" value="4"/>
    <arg name="parallel" value="100"/>

    <!-- 2. General -->

    <!-- 2.1 Basic Coding Standard -->
    <rule ref="./src/Stefna" />

    <!-- Include the whole PSR-2 standard -->
    <rule ref="PSR2">
        <exclude name="Generic.WhiteSpace.DisallowTabIndent"/>
        <exclude name="Squiz.ControlStructures.ControlSignature.SpaceAfterCloseBrace"/>
    </rule>

    <!-- 2.3 Lines -->
    <!-- 2.4 Indenting -->

    <!-- Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array">
                <element value="T_COMMENT"/>
                <element value="T_DOC_COMMENT_OPEN_TAG"/>
            </property>
            <property name="tabIndent" value="true"/>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>

    <!-- Doc block rules -->
    <rule ref="Stefna.Commenting.DocComment">
        <exclude name="Stefna.Commenting.DocComment.TagValueIndent"/>
        <exclude name="Stefna.Commenting.DocComment.NonParamGroup"/>
        <exclude name="Stefna.Commenting.DocComment.MissingShort" />
    </rule>

    <!-- Array code styles-->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax.Found"/>
    <rule ref="Generic.Arrays.ArrayIndent"/>

    <!-- Enforce trailing comma in arrays -->
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoKeySpecified"/>
    </rule>

    <!-- special rules for else, elseif, catch, finally -->
    <rule ref="Stefna.ControlStructures.ElseCatch"/>
    <!-- needed special control structure check to not collide with ElseCatch -->
    <rule ref="Stefna.ControlStructures.ControlSignature"/>

    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml"><!-- relative path to your ruleset.xml -->
        <exclude name="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants" />
        <exclude name="SlevomatCodingStandard.Classes.UselessLateStaticBinding" />
        <exclude name="SlevomatCodingStandard.ControlStructures.AssignmentInCondition" />
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowEmpty" />
        <exclude name="SlevomatCodingStandard.ControlStructures.EarlyExit" />
        <exclude name="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators" />
        <exclude name="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators" />
        <exclude name="SlevomatCodingStandard.PHP.UselessParentheses" />
        <exclude name="SlevomatCodingStandard.Exceptions.DeadCatch" />
        <exclude name="SlevomatCodingStandard.Classes.ModernClassNameReference" />
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming" />
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming" />
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming" />
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousTraitNaming" />
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses" />
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator" />
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator" />
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator" />
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator" />
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison" />
        <exclude name="SlevomatCodingStandard.Functions.TrailingCommaInCall" />
        <exclude name="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint" />
        <exclude name="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions" />
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions" />
        <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces" />
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation" />
        <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName" />
        <exclude name="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment" />
        <exclude name="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces" />
        <exclude name="SlevomatCodingStandard.ControlStructures.ControlStructureSpacing" />
        <exclude name="SlevomatCodingStandard.Functions.UnusedParameter" />
        <exclude name="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly.ReferenceViaFullyQualifiedName" />
        <exclude name="SlevomatCodingStandard.Classes.TraitUseSpacing" />
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants" />
        <!--  would like a version of this that don't enforces @var for everything -->
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration" />

    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="spacesCountAroundEqualsSign" value="false"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="true"/>
        </properties>
    </rule>

    <!-- No FQCN in code, everything should be imported. -->
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <!-- All "use" statements must be used in the code. -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <!-- Require specific order of phpDoc annotations with empty newline between specific groups -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBeforeFirstContent" value="0"/>
            <property name="linesCountAfterLastContent" value="0"/>
            <property name="linesCountBetweenDescriptionAndAnnotations" value="1"/>
            <property name="linesCountBetweenAnnotationsGroups" value="1"/>
            <property name="annotationsGroups" type="array">
                <element value="
                    @internal,
                    @deprecated,
                "/>
                <element value="
                    @link,
                    @see,
                    @uses,
                "/>
                <element value="@param"/>
                <element value="@return"/>
                <element value="@throws"/>
            </property>
        </properties>
    </rule>
    <!-- Forbid useless annotations - Git and LICENCE file provide more accurate information -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@api"/>
                <element value="@author"/>
                <element value="@category"/>
                <element value="@copyright"/>
                <element value="@created"/>
                <element value="@license"/>
                <element value="@package"/>
                <element value="@since"/>
                <element value="@subpackage"/>
                <element value="@version"/>
            </property>
        </properties>
    </rule>
    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
                <element value="~^Created by .+\.\z~i"/>
                <element value="~^(User|Date|Time): \S+\z~i"/>
                <element value="~^\S+ [gs]etter\.\z~i"/>
                <element value="~^Class \S+\z~i"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid using absolute class name references (except global ones) -->
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="allowFallbackGlobalConstants" value="false"/>
            <property name="allowFallbackGlobalFunctions" value="false"/>
            <property name="allowFullyQualifiedGlobalClasses" value="false"/>
            <property name="allowFullyQualifiedGlobalConstants" value="false"/>
            <property name="allowFullyQualifiedGlobalFunctions" value="false"/>
            <property name="allowFullyQualifiedNameForCollidingClasses" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingConstants" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingFunctions" value="true"/>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>
</ruleset>